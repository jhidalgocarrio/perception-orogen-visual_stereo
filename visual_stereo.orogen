name "visual_stereo"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
import_types_from "base"
import_types_from "frame_helper/Calibration.h"
import_types_from "frame_helper/FrameHelperTypes.h"
import_types_from "visual_stereoTypes.hpp"
# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
using_library "opencv"
using_library "frame_helper"

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
# import_types_from "base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the visual_stereo namespace.
task_context "Task" do

    #**************************
    #**** Task Properties *****
    #**************************
    property("calib_parameters","frame_helper/StereoCalibration").
        doc 'Intrinsic and extrinsic camera calibration parameters'+
            'for a full parameter list have a look at frame_helper'

    property("resize_algorithm","/frame_helper/ResizeAlgorithm",:INTER_LINEAR).
        doc "resize algorithm which is used to scale the frame before it is written to the output port. "
            "allowed values are INTER_LINEAR, INTER_NEAREST, INTER_AREA, INTER_CUBIC, INTER_LANCZOS4, BAYER_RESIZE."

    property("minimum_hessian", "unsigned int", 400).
        doc "Determinate value for Hessian matrix. Threshold to decide from which value you are willing to accept keypoints."+
            "The lower the minHessian, the more keypoints you get, but they may be more noisy."+
            "In usual images, a value between 400 and 800 works well."

    #******************************
    #******* Input ports  *********
    #******************************
    input_port("left_frame", ro_ptr('base::samples::frame::Frame')).
        doc 'Left camera frame.'

    input_port("right_frame", ro_ptr('base::samples::frame::Frame')).
        doc 'Right camera frame.'

    #******************************
    #******* Transformer  *********
    #******************************
    stream_aligner do
    	align_port("left_frame", 0.5)
    	align_port("right_frame", 0.5)
    	max_latency(1.0)
    end

    # An output port, i.e. an object to which the component pushes data so that
    # it is transmitted to other components' inputs
    #
    # Data can be written using _output.write(value). _output.connected() returns
    # if this output is connected to an input or not.

    #******************************
    #******* Output Ports *********
    #******************************
    output_port("features_samples_out",  'visual_stereo::ExteroFeatures').
        doc 'Features samples of the current stereo pair.'

    #******************************
    #******* Debug Ports **********
    #******************************
    property('output_debug', 'bool', false).
	    doc 'Set to true if output debug information is desirable.'

    property('image_ouput_type', 'visual_stereo::IMAGE_OUTPUT_TYPE').
	    doc 'Images output type.'

    output_port("intra_frame_samples_out",  ro_ptr('base::samples::frame::Frame')).
        doc 'Intra (Left - Right) frame correspondences image.'

    output_port("inter_frame_samples_out",  ro_ptr('base::samples::frame::Frame')).
        doc 'Inter (Keypoints) in the image to the next.'

    output_port("features_point_samples_out",  'base::samples::Pointcloud').
        doc 'Features 3d point of the current stereo pair.'


    port_driven
end

